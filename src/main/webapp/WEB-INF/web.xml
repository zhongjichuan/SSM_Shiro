<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
  <display-name>SSM</display-name>
  
	<!--注意 
	web.xml中配置元素的加载顺序：context-param -> listener -> filter -> servlet
	同类元素的按其配置顺序加载，而filter和servlet则按filter-mapping的配置加载。
	所以web.xml文件配置按照加载顺序依次排列，同时注意filter-mapping的顺序，排在前面的filter将会被优先调用。
	-->
  
  <!-- 配置编码过滤器 -->
  <filter>
	<filter-name>CharacterEncodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
	<init-param>
		<param-name>forceRequestEncoding</param-name>
		<param-value>true</param-value>
	</init-param>
	<init-param>
		<param-name>forceResponseEncoding</param-name>
		<param-value>true</param-value>
	</init-param>
  </filter>
  <filter-mapping>
  	<filter-name>CharacterEncodingFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- 设置spring的配置文件 -->
  <context-param>
  	<param-name>contextConfigLocation</param-name>
	<param-value>classpath:applicationContext.xml</param-value>  	
  </context-param>
  
  <!-- web容器启动后需要立即初始化spring容器 -->
  <listener>
  	<listener-class>
  		org.springframework.web.context.ContextLoaderListener
  	</listener-class>
  </listener>
  
  <!-- 配置springMvc的前端控制器 -->
  <servlet>
  	<servlet-name>springmvc</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<!-- 指定springmvc的配置文件 -->
  	<init-param>
  		<param-name>contextConfigLocation</param-name>
  		<param-value>classpath:springmvc.xml</param-value>
  	</init-param>
  	<!-- 标记容器是否在启动的时候就加载这个servlet -->
  	<load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>springmvc</servlet-name>
  	<url-pattern>/</url-pattern>
  </servlet-mapping>


	<!-- shiro -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<!-- <filter-class>org.apache.shiro.web.servlet.ShiroFilter</filter-class> -->
		<!-- 
		DelegatingFilterProxy作用是自动到spring容器查找名字为shiroFilter（filter-name）的bean并把所有Filter的操作委托给它.
		在applicationContext.xml中配置shiroFilter
		-->
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> 
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
	<url-pattern>/*</url-pattern>
	</filter-mapping>
  
 <!--  从Shiro 1.2开始引入了Environment/WebEnvironment的概念，即由它们的实现提供相应的SecurityManager及其相应的依赖。
		  ShiroFilter会自动找到Environment然后获取相应的依赖。
	      通过EnvironmentLoaderListener来创建相应的WebEnvironment，
		  并自动绑定到ServletContext，默认使用IniWebEnvironment实现。 -->
  

<!--未使用spring整合 -->
<!-- 初始化securityManager对象所需的环境配置 -->
	 <!--  <listener>
	   <listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>
	  </listener> -->
	<!-- <context-param>
		<param-name>shiroEnvironmentClass</param-name>
		<param-value>org.apache.shiro.web.env.IniWebEnvironment</param-value>
	</context-param>
	<context-param>
		<param-name>shiroConfigLocations</param-name>
		<param-value>classpath:shiroConfig/shiro.ini</param-value>
	</context-param> -->
  
   <!-- siteMesh -->
   <filter>
		<filter-name>sitemeshFilter</filter-name>
		<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemeshFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>